import numpy as np

matrice = [
    [2711, 150, 191, 23, 10, 105, 57, 67, 135, 142, 94, 97, 365, 50, 126, 5, 32, 3, 31, 2, 5],
    [9, 245, 4, 1, 0, 5, 8, 2, 20, 10, 12, 11, 51, 5, 10, 0, 10, 0, 9, 0, 2],
    [5, 0, 6, 0, 0, 1, 0, 1, 4, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [3, 1, 2, 64, 0, 0, 0, 3, 0, 0, 0, 1, 2, 2, 1, 0, 2, 0, 0, 0, 6],
    [0, 1, 0, 1, 91, 0, 3, 7, 17, 2, 0, 1, 4, 1, 0, 0, 3, 1, 0, 0, 0],
    [26, 10, 6, 1, 1, 316, 10, 4, 9, 19, 3, 0, 25, 0, 13, 0, 0, 0, 0, 0, 2],
    [21, 36, 10, 3, 7, 2, 1128, 18, 87, 32, 34, 21, 56, 44, 37, 0, 43, 22, 13, 6, 3],
    [3, 5, 0, 3, 10, 1, 11, 144, 11, 1, 0, 6, 19, 10, 4, 7, 0, 0, 1, 1, 12],
    [16, 75, 16, 7, 48, 13, 194, 104, 1966, 50, 208, 55, 163, 76, 120, 4, 31, 41, 29, 9, 14],
    [33, 43, 14, 6, 0, 18, 21, 11, 30, 631, 5, 22, 128, 3, 28, 2, 3, 0, 2, 0, 16],
    [8, 18, 4, 1, 1, 5, 19, 0, 12, 1, 428, 1, 10, 1, 8, 0, 12, 13, 7, 0, 0],
    [7, 9, 1, 3, 0, 0, 4, 7, 8, 2, 1, 148, 6, 5, 17, 1, 4, 0, 1, 0, 1],
    [206, 227, 81, 42, 39, 43, 128, 90, 390, 340, 79, 87, 2334, 70, 272, 1, 27, 12, 33, 2, 12],
    [6, 5, 6, 7, 1, 0, 10, 9, 21, 7, 0, 12, 16, 1283, 8, 0, 2, 0, 0, 4, 2],
    [12, 7, 13, 1, 1, 2, 16, 10, 36, 13, 2, 23, 46, 7, 509, 0, 2, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0],
    [14, 14, 3, 22, 3, 4, 72, 42, 53, 8, 24, 69, 57, 54, 45, 21, 2067, 15, 11, 71, 30],
    [21, 61, 8, 6, 30, 9, 273, 39, 424, 47, 185, 16, 87, 200, 67, 28, 44, 11246, 15, 350, 36],
    [6, 1, 2, 1, 0, 3, 0, 1, 7, 0, 4, 1, 2, 0, 3, 0, 3, 0, 567, 6, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 1],
    [1, 0, 0, 0, 0, 0, 1, 2, 4, 0, 0, 2, 4, 1, 5, 0, 10, 0, 0, 9, 101]
]

matrice = [[3208, 121, 21, 13, 5, 151, 75, 47, 116, 131, 81, 60, 168, 28, 109, 1, 36, 4, 24, 0, 2], [13, 248, 1, 1, 0, 10, 12, 5, 18, 16, 16, 11, 37, 2, 11, 0, 7, 0, 6, 0, 0], [8, 0, 5, 0, 0, 1, 1, 0, 3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 60, 1, 0, 0, 2, 0, 0, 0, 0, 2, 5, 3, 0, 3, 0, 1, 0, 5], [0, 0, 0, 0, 104, 0, 6, 6, 5, 1, 0, 0, 5, 0, 1, 0, 3, 1, 0, 0, 0], [25, 6, 0, 0, 1, 353, 8, 0, 10, 19, 1, 0, 12, 0, 9, 0, 0, 0, 0, 0, 1], [29, 27, 1, 1, 0, 10, 1233, 10, 92, 33, 48, 8, 35, 27, 15, 0, 29, 17, 6, 0, 2], [2, 4, 0, 0, 16, 6, 15, 142, 11, 3, 0, 4, 11, 6, 8, 2, 3, 0, 1, 0, 15], [34, 76, 4, 3, 76, 35, 270, 118, 1885, 52, 250, 49, 77, 78, 131, 0, 37, 32, 20, 2, 10], [46, 32, 2, 4, 1, 38, 32, 9, 26, 684, 3, 14, 73, 5, 21, 0, 6, 2, 1, 0, 17], [11, 23, 3, 0, 1, 4, 20, 0, 21, 2, 438, 0, 4, 1, 7, 0, 8, 0, 5, 1, 0], [17, 11, 0, 3, 0, 1, 5, 11, 9, 3, 0, 131, 8, 6, 12, 0, 7, 0, 1, 0, 0], [344, 225, 11, 21, 59, 110, 227, 104, 320, 406, 89, 54, 2085, 78, 273, 1, 48, 18, 31, 0, 11], [8, 4, 0, 7, 0, 1, 33, 7, 18, 7, 2, 5, 6, 1287, 9, 0, 3, 0, 0, 1, 1], [13, 4, 8, 1, 0, 5, 17, 9, 33, 19, 4, 10, 27, 5, 539, 0, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 1], [24, 15, 0, 9, 0, 14, 85, 21, 39, 15, 38, 20, 38, 54, 43, 2, 2237, 6, 2, 9, 28], [24, 40, 6, 3, 22, 18, 347, 21, 334, 45, 261, 7, 32, 293, 65, 7, 82, 11486, 1, 83, 15], [7, 3, 0, 1, 0, 7, 1, 0, 12, 1, 5, 0, 1, 2, 3, 0, 1, 0, 564, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 1], [4, 0, 0, 1, 0, 0, 1, 5, 2, 0, 0, 0, 7, 4, 13, 0, 8, 0, 1, 0, 94]]

def calcul_scores(confusion, nb=None):
    if not isinstance(confusion, np.ndarray):
        assert type(confusion) == list
        confusion = np.array(confusion)
    i, j = confusion.shape
    assert i==j
    N = i
    if nb == None:
        nb = N

    resu = dict()
    
    diago = np.diag(confusion)[:nb]
    somme = (confusion[:nb]).sum(axis=1)
    accuracy = diago.sum()/somme.sum()
    bal_accuracy = (diago / somme).mean()
    #print("%d : %f / %f"%(nb, accuracy, bal_accuracy))
    resu[nb] = (accuracy, bal_accuracy)
    if nb < N:
        diago = np.diag(confusion)
        somme = confusion.sum(axis=1)
        accuracy = diago.sum()/somme.sum()
        bal_accuracy = (diago / somme).mean()
        #print("%d : %f / %f"%(N, accuracy, bal_accuracy))
        resu[N] = (accuracy, bal_accuracy)
    return resu


if __name__ == "__main__":
    scores = calcul_scores(matrice,15)
    for n, (acc, balacc) in scores.items() :
        print("%d : %f / %f"%(n, acc, balacc))