import numpy as np

matrice = [[2764, 126, 49, 63, 8, 267, 109, 47, 145, 220, 148, 88, 131, 52, 80, 2, 36, 3, 53, 0, 10], [11, 223, 1, 2, 0, 14, 18, 2, 24, 27, 18, 18, 15, 7, 17, 0, 3, 2, 12, 0, 0], [10, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0], [5, 3, 0, 62, 0, 0, 1, 1, 4, 0, 0, 0, 4, 5, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 107, 0, 4, 5, 10, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1], [44, 10, 1, 6, 4, 281, 8, 3, 13, 36, 10, 4, 8, 2, 7, 0, 3, 0, 3, 0, 2], [21, 45, 3, 8, 3, 8, 1000, 16, 70, 53, 89, 20, 22, 57, 29, 2, 119, 23, 22, 7, 6], [2, 0, 1, 10, 20, 4, 12, 114, 23, 3, 0, 8, 11, 15, 7, 0, 8, 2, 1, 7, 1], [21, 113, 29, 21, 72, 40, 193, 88, 1880, 64, 231, 83, 69, 90, 88, 13, 54, 34, 33, 5, 18], [33, 75, 10, 4, 4, 43, 39, 4, 34, 604, 9, 12, 72, 8, 45, 0, 15, 0, 2, 0, 3], [13, 22, 0, 2, 3, 5, 22, 0, 23, 8, 412, 1, 3, 0, 5, 0, 16, 7, 5, 1, 1], [10, 7, 0, 9, 1, 1, 5, 7, 3, 1, 0, 140, 5, 11, 11, 0, 10, 0, 2, 0, 2], [270, 337, 29, 88, 84, 122, 156, 92, 413, 634, 112, 113, 1369, 130, 451, 3, 32, 14, 53, 2, 11], [11, 5, 1, 43, 1, 3, 38, 17, 30, 11, 0, 25, 14, 1173, 5, 0, 7, 3, 2, 3, 7], [12, 11, 18, 12, 2, 7, 11, 5, 30, 24, 4, 26, 32, 15, 477, 2, 9, 3, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 8], [22, 9, 8, 71, 3, 8, 42, 25, 38, 7, 31, 69, 21, 47, 34, 8, 1882, 23, 7, 74, 270], [38, 153, 15, 5, 58, 19, 200, 41, 568, 47, 247, 38, 39, 254, 73, 35, 148, 11011, 4, 182, 17], [5, 4, 0, 1, 0, 7, 2, 1, 17, 0, 8, 0, 2, 2, 0, 0, 4, 1, 552, 0, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 18, 1], [6, 0, 0, 0, 0, 0, 2, 1, 5, 0, 1, 1, 6, 7, 4, 2, 30, 0, 3, 13, 59]]

def calcul_scores(confusion, nb=None):
    if not isinstance(confusion, np.ndarray):
        assert type(confusion) == list
        confusion = np.array(confusion)
    i, j = confusion.shape
    assert i==j
    N = i
    if nb == None:
        nb = N

    resu = dict()
    
    diago = np.diag(confusion)[:nb]
    somme = (confusion[:nb]).sum(axis=1)
    accuracy = diago.sum()/somme.sum()
    bal_accuracy = (diago / somme).mean()
    #print("%d : %f / %f"%(nb, accuracy, bal_accuracy))
    resu[nb] = (accuracy, bal_accuracy)
    if nb < N:
        diago = np.diag(confusion)
        somme = confusion.sum(axis=1)
        accuracy = diago.sum()/somme.sum()
        bal_accuracy = (diago / somme).mean()
        #print("%d : %f / %f"%(N, accuracy, bal_accuracy))
        resu[N] = (accuracy, bal_accuracy)


if __name__ == "__main__":
    scores = calcul_scores(matrice,15)
    for n, (acc, balacc) in scores :
        print("%d : %f / %f"%(n, acc, balacc))